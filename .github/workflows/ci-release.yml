name: Publish release

on:
  # Disable auto-run, once we sunset 1.x components we might go back to auto-release.
  #
  # release:
  #   types:
  #     - published

  workflow_dispatch:
    inputs:
      # Disable version inputs for now, the build always uses the latest tags.
      #
      # version_v1:
      #   required: true
      #   type: string
      #   description: Version number for 1.x components. Don't include a leading `v`.

      # version_v2:
      #   required: true
      #   type: string
      #   description: Version number for 2.x components. Don't include a leading `v`.

      dry_run:
        required: true
        type: boolean
        description: Do a test run. It will only build one platform (for speed) and will not push artifacts.

      overwrite:
        required: true
        type: boolean
        description: Allow overwriting artifacts.
jobs:
  prepare-versions:
    runs-on: ubuntu-latest
    outputs:
      v2_version: ${{ steps.versions.outputs.v2_version }}
      v1_version: ${{ steps.versions.outputs.v1_version }}
      v2_major_minor: ${{ steps.versions.outputs.v2_major_minor }}
      v1_major_minor: ${{ steps.versions.outputs.v1_major_minor }}
      release_v1: ${{ steps.versions.outputs.release_v1 }}
      platforms: ${{ steps.params.outputs.platforms }}
      docker_flags: ${{ steps.params.outputs.docker_flags }}
      gpg_key_override: ${{ steps.params.outputs.gpg_key_override }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          submodules: true
      
      - name: Fetch git tags
        run: |
          git fetch --prune --unshallow --tags
      
      - name: Compute versions
        id: versions
        run: |
          V2_VERSION=$(make echo-v2)
          V1_VERSION=$(make echo-v1 || echo "")
          echo "v2_version=${V2_VERSION}" >> $GITHUB_OUTPUT
          echo "v1_version=${V1_VERSION}" >> $GITHUB_OUTPUT
          echo "v2_major_minor=${V2_VERSION%.*}" >> $GITHUB_OUTPUT
          echo "v1_major_minor=${V1_VERSION%.*}" >> $GITHUB_OUTPUT
          
           if [[ -z "${V1_VERSION}" ]]; then
            echo "release_v1=false" >> $GITHUB_OUTPUT
          else
            echo "release_v1=true" >> $GITHUB_OUTPUT
          fi

      
      - name: Determine parameters
        id: params
        run: |
          docker_flags=()
          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            docker_flags=("${docker_flags[@]}" -l -p linux/amd64)
            echo "platforms=linux/amd64" >> $GITHUB_OUTPUT
            echo "gpg_key_override=-k skip" >> $GITHUB_OUTPUT
          else
            echo "platforms=$(make echo-platforms)" >> $GITHUB_OUTPUT
          fi
          if [[ "${{ inputs.overwrite }}" == "true" ]]; then
            docker_flags=("${docker_flags[@]}" -o)
          fi
          echo "docker_flags=${docker_flags[@]}" >> $GITHUB_OUTPUT

  publish-release:
    permissions:
      contents: write
      deployments: write
    if: github.repository == 'jaegertracing/jaeger'
    runs-on: ubuntu-latest
    needs: prepare-versions
    strategy:
      matrix:
        include:
          - track: v2
            primary: true
            version: ${{ needs.prepare-versions.outputs.v2_version }}
            build_track: v2
          - track: v1
            primary: false
            version: ${{ needs.prepare-versions.outputs.v1_version }}
            build_track: v1
            # Only include v1 if we're releasing it
        exclude:
          - track: v1
            version: ""

    steps:
    - name: Clean up some disk space
      run: |
        sudo rm -rf /usr/local/lib/android || true
        df -h /

    - uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
      with:
        egress-policy: audit

    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcb5dd907a8 # v5.0.0
      with:
        submodules: true

    - name: Fetch git tags
      run: |
        git fetch --prune --unshallow --tags

    - uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
      with:
        go-version: 1.25.x

    - uses: ./.github/actions/setup-node.js

    - name: Export BRANCH variable and validate semver
      if: ${{ matrix.track == 'v2' || needs.prepare-versions.outputs.release_v1 == 'true' }}
      run: |
        BRANCH=${{ matrix.version }}
        echo "Validate that the version tag ${BRANCH} is in semver format"
        echo ${BRANCH} | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+(-rc[0-9]+)?$'
        echo "BRANCH=${BRANCH}" >> ${GITHUB_ENV}
        echo "BUILD_TRACK=${{ matrix.build_track }}" >> ${GITHUB_ENV}

    - name: Configure GPG Key
      if: ${{ inputs.dry_run != true }}
      uses: crazy-max/ghaction-import-gpg@e89d40939c28e39f97cf32126055eeae86ba74ec # v6.3.0
      with:
        gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
        passphrase: ${{ secrets.GPG_PASSPHRASE }}

    - name: Build all binaries
      run: |
        make build-all-platforms \
          PLATFORMS=${{ needs.prepare-versions.outputs.platforms }} \
          BUILD_TRACK=${{ matrix.build_track }}

    - name: Package binaries
      run: |
        bash scripts/build/package-deploy.sh \
          -p ${{ needs.prepare-versions.outputs.platforms }} \
          ${{ needs.prepare-versions.outputs.gpg_key_override }}

    - name: Upload binaries
      if: ${{ inputs.dry_run != true && (matrix.track == 'v2' || needs.prepare-versions.outputs.release_v1 == 'true') }}
      uses: svenstaro/upload-release-action@5e35e583720436a2cc5f9682b6f55657101c1ea1 # 2.11.1
      with:
        file: '{deploy/*.tar.gz,deploy/*.zip,deploy/*.sha256sum.txt,deploy/*.asc}'
        file_glob: true
        overwrite: ${{ inputs.overwrite }}
        tag: ${{ env.BRANCH }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Delete the release artifacts after uploading them
      run: |
        rm -rf deploy || true
        df -h /

    - uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0

    - name: Build and upload container images
      if: ${{ matrix.track == 'v2' || needs.prepare-versions.outputs.release_v1 == 'true' }}   
      run: |
        bash scripts/build/build-upload-docker-images.sh -B \
          ${{ needs.prepare-versions.outputs.docker_flags }}
      env:
        DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        QUAY_TOKEN: ${{ secrets.QUAY_TOKEN }}
        BUILD_TRACK: ${{ matrix.build_track }}

    - name: Build, test, and publish all-in-one image
      if: ${{ matrix.track == 'v2' || needs.prepare-versions.outputs.release_v1 == 'true' }}
      run: |
        BRANCH=${{ matrix.version }} \
        bash scripts/build/build-all-in-one-image.sh \
          ${{ needs.prepare-versions.outputs.docker_flags }} \
          ${{ matrix.build_track }}
      env:
        DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        QUAY_TOKEN: ${{ secrets.QUAY_TOKEN }}

    # Only build hotrod on v2 (primary) to avoid duplication
    - name: Build, test, and publish hotrod image
      if: matrix.primary == true
      run: |
        bash scripts/build/build-hotrod-image.sh \
          ${{ needs.prepare-versions.outputs.docker_flags }}
      env:
        DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        QUAY_TOKEN: ${{ secrets.QUAY_TOKEN }}

    - name: Generate SBOM
      if: matrix.primary == true
      uses: anchore/sbom-action@e11c554f704a0b820cbf8c51673f6945e0731532 # v0.20.0
      with:
        output-file: jaeger-SBOM.spdx.json
        upload-release-assets: false
        upload-artifact: false

    - name: Upload SBOM
      if: ${{ inputs.dry_run != true && matrix.primary == true }}
      uses: svenstaro/upload-release-action@5e35e583720436a2cc5f9682b6f55657101c1ea1 # 2.11.1
      with:
        file: jaeger-SBOM.spdx.json
        overwrite: ${{ inputs.overwrite }}
        tag: ${{ matrix.version }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}

  verify-artifacts:
    runs-on: ubuntu-latest
    needs: [prepare-versions, publish-release]
    if: ${{ inputs.dry_run != true }}
    steps:
      - name: Verify v2 release exists (primary)
        run: |
          gh release view ${{ needs.prepare-versions.outputs.v2_version }} \
            --repo jaegertracing/jaeger \
            --json assets | jq -e '.assets | length > 0'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Verify v1 release exists (legacy)
        if: needs.prepare-versions.outputs.release_v1 == 'true'
        run: |
          gh release view ${{ needs.prepare-versions.outputs.v1_version }} \
            --repo jaegertracing/jaeger \
            --json assets | jq -e '.assets | length > 0'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
